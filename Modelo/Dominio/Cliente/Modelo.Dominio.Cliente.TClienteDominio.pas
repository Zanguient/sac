{*******************************************************}
{* 
{* uTCliente.pas
{* Delphi Implementation of the Class TCliente
{* Generated by Enterprise Architect
{* Created on:      16-dez-2014 14:29:27
{* Original author: PROGRAMACAO
{*  
{*******************************************************}

unit Modelo.Dominio.Cliente.TClienteDominio;

interface

uses  Modelo.Entidade.Cliente.TCliente, System.Generics.Collections,
Modelo.Entidade.Cliente.TClienteLista,
Modelo.DAO.Cliente.TClienteDAO, Modelo.Dominio.Cliente.IClienteDominio, ADODB;

type

  TClienteDominio = class(TInterfacedObject, IClienteDominio)
  private
     FCliente    : TClienteEntidade;
     FClienteDAO : TClienteDAO;
     Conexao: TADOConnection;
     Credito, NovoCredito: double;
     function VerificaLimiteDeCredito(var FCliente: TClienteEntidade; ValorCompra: double): Boolean;

  public

    constructor Create (var Conexao: TADOConnection);

    destructor Destroy; override;

    procedure NovoCliente;

    function GravarCliente:Boolean;

    function removerCliente:Boolean;

    function buscarClientePorCodigo(codigo : Integer):TClienteEntidade;

    function buscarTodosCliente: TClienteLista;

    function BuscaCreditoCliente(var FCliente: TClienteEntidade): double;

    function AtualizaCreditoCliente(FCliente: TClienteEntidade; TotalCompra: double): Boolean;

    function VerificaSeExisteLimiteDeCreditoDisponivel(var FCliente: TClienteEntidade; ValorCompra: double): boolean;
  end;

implementation

uses
  SysUtils, Util.TLog, UDM, TypInfo, Util.Mensagens, USenha_ADM, Windows,
  UDeclaracao, Forms;


{ TClienteDominio }


constructor TClienteDominio.Create(var Conexao: TADOConnection);
begin
  self.Conexao:= Conexao;
  FClienteDAO:= TClienteDAO.Create(Conexao);
end;

destructor TClienteDominio.Destroy;
begin
  if Assigned(FCliente) then
    FreeAndNil(FCliente);
  inherited;
end;

function TClienteDominio.AtualizaCreditoCliente(FCliente: TClienteEntidade;
  TotalCompra: double): Boolean;
begin
  try
    NovoCredito:= BuscaCreditoCliente(FCliente);
    NovoCredito:= NovoCredito - TotalCompra;
    Result:= FClienteDAO.AtualizaCreditoCliente(FCliente, NovoCredito);
  finally

  end;
end;

function TClienteDominio.BuscaCreditoCliente(
  var FCliente: TClienteEntidade): double;
begin
  try
    Result:= FClienteDAO.BuscaCreditoCliente(FCliente);
  finally

  end;
end;

function TClienteDominio.buscarClientePorCodigo(Codigo: Integer): TClienteEntidade;
var
  qAux: TADOQuery;
begin
  try
    qAux:= TADOQuery.Create(nil);
    with qAux, sql do
    begin
      close;
      Connection:= dm.ADOConnection1;
      clear;
      Add('select C.Codigo, C.Nome_Nome_Fantasia, C.Razao_Social, C.CPF, C.RG, C.Tipo, C.CNPJ, C.Insc_Estadual, L.Descricao as Log');
      Add('from Cliente C');
      Add('left join Logradouro L on (C.Codigo_Logradouro = L.Codigo)');
      Add('where C.Codigo = :Codigo');
      Parameters.ParamByName('Codigo').Value:= codigo;
      Open;

      FCliente:= TClienteEntidade.Create;

      if (IsEmpty = false) then
      begin
        FCliente.Codigo:= qAux.FieldByName('Codigo').AsInteger;
        FCliente.RazaoSocial:= qAux.FieldByName('Razao_Social').AsString;
        FCliente.NomeFantasia:= qAux.FieldByName('Nome_Nome_Fantasia').AsString;

        if (qAux.FieldByName('Tipo').AsString = 'FÍSICO') then
          FCliente.CPFCNPJ:= qAux.FieldByName('CPF').AsString
        ELSE
          FCliente.CPFCNPJ:= qAux.FieldByName('CNPJ').AsString;

        FCliente.EnderecoTexto:= qAux.FieldByName('Log').AsString;
      end;

        Result:= FCliente;
    end;
  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - buscarClientePorCodigo - '+E.Message);
      TLog.Error(Self.ClassName+' - buscarClientePorCodigo - '+E.Message);
    end;
  end;
end;

function TClienteDominio.buscarTodosCliente:TClienteLista;
begin
  try
    Result := TClienteLista.Create;


  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - buscarTodosCliente - '+E.Message);
      TLog.Error(Self.ClassName+' - buscarTodosCliente - '+E.Message);
    end;

  end;
end;

function TClienteDominio.GravarCliente: Boolean;
begin
  try

  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - GravarCliente - '+E.Message);
      TLog.Error(Self.ClassName+' - GravarCliente - '+E.Message);
    end;

  end;
end;

procedure TClienteDominio.NovoCliente;
begin
  try
    if Assigned(FCliente) then
      FreeAndNil(FCliente);
    FCliente := TClienteEntidade.Create;

  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - NovoCliente - '+E.Message);
      TLog.Error(Self.ClassName+' - NovoCliente - '+E.Message);
    end;

  end;
end;

function TClienteDominio.removerCliente: Boolean;
begin
  try

  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - removerCliente - '+E.Message);
      TLog.Error(Self.ClassName+' - removerCliente - '+E.Message);
    end;
  end;
end;

function TClienteDominio.VerificaLimiteDeCredito(
  var FCliente: TClienteEntidade; ValorCompra: double): Boolean;
begin
  Credito:= BuscaCreditoCliente(FCliente);
  if (Credito < ValorCompra) then
  begin
    //NovoCredito:= Credito - ValorCompra;
    Result:= False;
  end
  else
  begin
    //NovoCredito:= Credito - ValorCompra;
    Result:= True;
  end;
end;

function TClienteDominio.VerificaSeExisteLimiteDeCreditoDisponivel(
  var FCliente: TClienteEntidade; ValorCompra: double): boolean;
begin
  if not(VerificaLimiteDeCredito(FCliente, ValorCompra)) then
  begin
    if (FCliente.AcimaLimiteCredito = PERMITIRVENDA)  then
    begin
      //AtualizaCreditoCliente(FCliente, NovoCredito);
      UDeclaracao.Insere_Historico(usuario, 'VENDA EFETUADA PARA UM CLIENTE QUE ULTRAPASSOU O LIMITE DE CRÉDITO. ESTÁ CONFIGURADO PARA LIBERAR A VENDA.' , TimeToStr(time), insercao, date);
      Result:= True;
    end
    else if (FCliente.AcimaLimiteCredito = BLOQUEARVENDA) then
    begin
      TMensagens.MensagemErro('O cliente atingiu o limite de compras a prazo. Venda bloqueada.');
      Result:= false;
    end
    else if (FCliente.AcimaLimiteCredito = EXIBIRMENSAGEM) then
    begin
      if (Application.MessageBox('O cliente atingiu o limite de compras a prazo. Deseja continuar?', 'Atingiu limite de crédito', MB_YESNO+MB_ICONEXCLAMATION)) = IDNO then
      begin
        Result:= false;
      end
      else
      begin
        UDeclaracao.Insere_Historico(usuario, 'FOI LIBERADA A VENDA PARA O CLIENTE '+FCliente.NomeFantasia+', ATRAVÉS DE ACEITAÇÃO NA MENSAGEM DE ALERTA.' , TimeToStr(time), insercao, date);
        Result:= True;
      end;
    end
    else if (FCliente.AcimaLimiteCredito = SOLICITARADM) then
    begin
      Application.MessageBox('O cliente atingiu o limite de compras a prazo. Por favor, chame o Administrador para liberar a venda.', 'Venda Bloqueada Temporariamente', MB_OK+MB_ICONHAND);

      Application.CreateForm(TFrmSenha_ADM, FrmSenha_ADM);
      FrmSenha_ADM.ShowModal;
      FrmSenha_ADM.Free;

      if (liberado_cliente_acima_limite) then
      begin
        liberado_cliente_acima_limite:= false;
        UDeclaracao.Insere_Historico(usuario, 'FOI LIBERADA A VENDA PARA O CLIENTE '+FCliente.NomeFantasia+', ATRAVÉS DA SENHA DO ADMINISTRADOR DO SISTEMA.' , TimeToStr(time), insercao, date);
        Result:= True;
      end
      else
      begin
        Result:= false;
      end;
    end;
  end
  else
  begin
    //AtualizaCreditoCliente(FCliente, NovoCredito);
    Result:= True;
  end;

end;

end.
