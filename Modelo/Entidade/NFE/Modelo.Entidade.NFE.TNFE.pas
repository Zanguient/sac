{*******************************************************}
{* 
{* uTNotaFiscal.pas
{* Delphi Implementation of the Class TNotaFiscal
{* Generated by Enterprise Architect
{* Created on:      16-dez-2014 14:28:37
{* Original author: PROGRAMACAO
{*  
{*******************************************************}

unit Modelo.Entidade.NFE.TNFE;

interface

uses Modelo.Entidade.Cliente.TCliente,
  Modelo.Entidade.NFE.TNotaFiscalTransportadora,
  Modelo.Entidade.NFE.TNotaFiscalEletronica,
  Modelo.Entidade.NFE.TNotaFiscalTotais,
  Modelo.Entidade.NaturezaOperacao.TNaturezaOperacao,
  Modelo.Entidade.NFE.TNotaFiscalItem, System.Generics.Collections;

type

  TipoNF = (Entrada, Saida);
  TNFE = class
  private
    FNumero                   : Integer;
    FCodigo                   : Integer;
    FDestinatorio             : TClienteEntidade;
    FNotaFiscalEletronica     : TNotaFiscalEletronica;
    FNotaFiscalTotais         : TNotaFiscalTotais;
    FTipo                     : TipoNF;
    FModelo                   : String;
    FNaturezaOperacao         : TNaturezaOperacao;
    FDataEmissao              : TDateTime;
    FDataSaida                : TDateTime;
    FObservacao               : String;
    FItens                    : TObjectList<TNotaFiscalItem>;
    FNotaFiscalTransportadora : TNotaFiscalTransportadora;
    procedure SetCodigo(const Value: Integer);
    procedure SetDataEmissao(const Value: TDateTime);
    procedure SetDataSaida(const Value: TDateTime);
    procedure SetDestinatorio(const Value: TClienteEntidade);
    procedure SetModelo(const Value: String);
    procedure SetNumero(const Value: Integer);
    procedure SetObservacao(const Value: String);
    procedure SetTipo(const Value: TipoNF);
  public
    constructor Create; overload;
    destructor Destroy; override;

    property Numero: Integer read FNumero write SetNumero;
    property Codigo: Integer read FCodigo write SetCodigo;
    property Destinatorio: TClienteEntidade read FDestinatorio write SetDestinatorio;
    property NotaFiscalEletronica: TNotaFiscalEletronica read FNotaFiscalEletronica;
    property Tipo: TipoNF read FTipo write SetTipo;
    property Modelo: String read FModelo write SetModelo;
    property NaturezaOperacao: TNaturezaOperacao read FNaturezaOperacao;
    property DataEmissao: TDateTime read FDataEmissao write SetDataEmissao;
    property DataSaida: TDateTime read FDataSaida write SetDataSaida;
    property Observacao: String read FObservacao write SetObservacao;
    property NotaFiscalTotais: TNotaFiscalTotais read FNotaFiscalTotais;
    property NotaFiscalTransportadora: TNotaFiscalTransportadora read FNotaFiscalTransportadora;

    procedure AddItem(Item : TNotaFiscalItem);
    function Item(index : Integer): TNotaFiscalItem;
    function Itens : TObjectList<TNotaFiscalItem>;

  end;

implementation

uses
  SysUtils, Util.TLog, Util.Mensagens;

{implementation of TNotaFiscal}

constructor TNFE.Create;
begin
  inherited Create;
  FNotaFiscalTransportadora := TNotaFiscalTransportadora.Create;
  FNotaFiscalTotais := TNotaFiscalTotais.Create;
  FNaturezaOperacao := TNaturezaOperacao.Create;
  FNotaFiscalTransportadora := TNotaFiscalTransportadora.Create;
  FItens := TObjectList<TNotaFiscalItem>.Create;
end;

destructor TNFE.Destroy;
begin
  try
    FreeAndNil(FNotaFiscalTransportadora);
    FreeAndNil(FNotaFiscalTotais);
    FreeAndNil(FNotaFiscalTransportadora);
    FreeAndNil(FItens);
    inherited Destroy;
  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - Destroy - '+E.Message);
      TLog.Error(Self.ClassName+' - Destroy - '+E.Message);
    end;
  end;
end;

procedure TNFE.AddItem(Item: TNotaFiscalItem);
begin
  FItens.Add(Item);
end;

function TNFE.Item(index: Integer): TNotaFiscalItem;
begin
  Result :=  FItens.Items[index];
end;

function TNFE.Itens: TObjectList<TNotaFiscalItem>;
begin
  Result := FItens;
end;

procedure TNFE.SetCodigo(const Value: Integer);
begin
  FCodigo := Value;
end;

procedure TNFE.SetDataEmissao(const Value: TDateTime);
begin
  FDataEmissao := Value;
end;

procedure TNFE.SetDataSaida(const Value: TDateTime);
begin
  FDataSaida := Value;
end;

procedure TNFE.SetDestinatorio(const Value: TClienteEntidade);
begin
  FDestinatorio := Value;
end;

procedure TNFE.SetModelo(const Value: String);
begin
  FModelo := Value;
end;

procedure TNFE.SetNumero(const Value: Integer);
begin
  FNumero := Value;
end;

procedure TNFE.SetObservacao(const Value: String);
begin
  FObservacao := Value;
end;

procedure TNFE.SetTipo(const Value: TipoNF);
begin
  FTipo := Value;
end;

end.