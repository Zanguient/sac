{*******************************************************}
{* 
{* uTCliente.pas
{* Delphi Implementation of the Class TCliente
{* Generated by Enterprise Architect
{* Created on:      16-dez-2014 14:29:27
{* Original author: PROGRAMACAO
{*  
{*******************************************************}

unit Modelo.DAO.Cliente.TClienteDAO;

interface

uses
  ADODB, Modelo.Entidade.Cliente.TCliente;

type

  TClienteDAO = class
  private
    Conexao : TADOConnection;
    function salvar(cliente : TClienteEntidade): Boolean;
    function editar(cliente : TClienteEntidade): Boolean;
  public

    constructor Create(var Conexao : TADOConnection);

    destructor Destroy; override;

    function gravar(cliente : TClienteEntidade): Boolean;

    function BuscaCreditoCliente(var FCliente: TClienteEntidade): double;

    function AtualizaCreditoCliente(FCliente: TClienteEntidade; Credito: double): Boolean;
  end;

implementation

uses
  SysUtils, Util.TLog, Modelo.Entidade.ComandosSQL, Modelo.Dominio.ComandosSQL,
  Util.Mensagens;

{ TClienteDAO }

function TClienteDAO.AtualizaCreditoCliente(FCliente: TClienteEntidade;
  Credito: double): Boolean;
var
  FComandoSQL: TComandoSQLEntidade;
  FComandoSQLDom: TComandoSQLDominio;
begin
  FComandoSQL:= TComandoSQLEntidade.Create;
  FComandoSQL.Conexao:= Conexao;
  FComandoSQL.ComandoSQL:= 'update Cliente set Credito = :Credito where Codigo = :Codigo';
  FComandoSQL.Parametros.Add('Credito');
  FComandoSQL.Parametros.Add('Codigo');
  FComandoSQL.Valores.Add(Credito);
  FComandoSQL.Valores.Add(FCliente.Codigo);
  FComandoSQLDom:= TComandoSQLDominio.Create(FComandoSQL);
  FComandoSQLDom.ExecutaComandoSQLSalvarAlterarExcluir;
end;

function TClienteDAO.BuscaCreditoCliente(var FCliente: TClienteEntidade): double;
var
  qAux: TADOQuery;
begin
  try
    qAux:= TADOQuery.Create(nil);
    with qAux, sql do
    begin
      close;
      Connection:= Conexao;
      clear;
      Add('select Credito, Acima_Limite_Credito from Cliente where Codigo = :Codigo');
      Parameters.ParamByName('Codigo').Value:= FCliente.Codigo;
      open;
      FCliente.Credito:= qAux.FieldByName('Credito').AsFloat;
      if (qAux.FieldByName('Acima_Limite_Credito').AsString = 'PERMITIR VENDA') then
        FCliente.AcimaLimiteCredito:= AcimaLimiteCreditoEnum.PERMITIRVENDA
      else if (qAux.FieldByName('Acima_Limite_Credito').AsString = 'BLOQUEAR VENDA') then
        FCliente.AcimaLimiteCredito:= AcimaLimiteCreditoEnum.BLOQUEARVENDA
      else if (qAux.FieldByName('Acima_Limite_Credito').AsString = 'EXIBIR MENSAGEM DE ALERTA') then
        FCliente.AcimaLimiteCredito:= AcimaLimiteCreditoEnum.EXIBIRMENSAGEM
      else if (qAux.FieldByName('Acima_Limite_Credito').AsString = 'SOLICITAR ADM.') then
        FCliente.AcimaLimiteCredito:= AcimaLimiteCreditoEnum.SOLICITARADM;

      Result:= qAux.FieldByName('Credito').AsFloat;
    end;
  finally
    FreeAndNil(qAux);
  end;
end;

constructor TClienteDAO.Create(var Conexao: TADOConnection);
begin
  Self.Conexao := Conexao;
end;

destructor TClienteDAO.Destroy;
begin

  inherited;
end;

function TClienteDAO.editar(cliente: TClienteEntidade): Boolean;
begin
  try

  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - editar - '+E.Message);
      TLog.Error(Self.ClassName+' - editar - '+E.Message);
    end;

  end;
end;

function TClienteDAO.gravar(cliente: TClienteEntidade): Boolean;
begin
 try

  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - gravar - '+E.Message);
      TLog.Error(Self.ClassName+' - gravar - '+E.Message);
    end;

  end;
end;

function TClienteDAO.salvar(cliente: TClienteEntidade): Boolean;
begin
 try

  except
    on E : Exception do
    begin
      TMensagens.MensagemErro(Self.ClassName+' - salvar - '+E.Message);
      TLog.Error(Self.ClassName+' - salvar - '+E.Message);
    end;

  end;
end;

end.
